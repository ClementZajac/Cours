@startuml

Actor Sponsor
Participant webSite
Database DataBase_Or_API as back
Participant ConsumerKafka
'Participant Animal
  ConsumerKafka -> back : RenseignerNaissance()

Sponsor -> webSite : authentication()
Activate webSite
alt#Gold #LightBlue "Authentification OK" 
  webSite -> back : get informations of Sponsor
  activate back
  back --> webSite : return informations of Sponsor
  deactivate back
  webSite --> Sponsor : return "Authentification effectuée"
  deactivate webSite

  Sponsor -> webSite : getAnimal()
  activate webSite
  webSite -> back : get informations of Animal
  activate back
  back --> webSite : return Informations of Animal
  deactivate back
  webSite --> Sponsor : return Object Animal
  deactivate webSite

  Sponsor -> webSite : Animal.getListOfEvents()
  activate webSite
  webSite -> back : get events of this animal
  activate back
  back --> webSite : return events of this animal
  deactivate back
  webSite --> Sponsor : return Object listOfEvents
  deactivate webSite

  'If animal is born && name is null


  alt#Gold #PaleGreen Animal is bord : listOfEvent contain "born" event and name is not defined
    
    Sponsor -> webSite : voteForName(String name)
    activate webSite
    webSite -> back : add vote for name
    activate back
    back --> webSite : return true
    deactivate back
    webSite --> Sponsor : return "Vote enregistré"
    deactivate webSite
  else #Pink Animal have already a name
    webSite --> Sponsor :return  "This animal have already a name"
  end

else #Pink "Authentification KO"
  webSite -> Sponsor : return "Authentification échouée"
end



@enduml


