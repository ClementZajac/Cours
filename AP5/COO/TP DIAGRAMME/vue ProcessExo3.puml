@startuml
class Utilisateur
class Animal{
    
}
class Sponsor{
  + doDonation(int) : void

}

class User{
  - id : int
  - name : string
  - surname : string
  - listOfDonation : Donation[]
  + makeDonation(amount:float, typeOfDonation:String) : Donation

}

class Donation{
  - id : int
  - amount : int
  - date : date
  - type : DonationType
  + getAmount() : int
  + getDate() : date
}

class DonationReguliÃ©re{
  + getAmount() : int
  + getDate() : date
}

class DonationPontuelle{
  + getAmount() : int
  + getDate() : date
}

class Evenement
class Vote{
  
}

Utilisateur --|> Sponsor
Utilisateur --> Animal
Sponsor --|> Animal
Animal --|> Evenement
Evenement --|> Vote

AnimalRepositoryAPI --|> AnimalRepository
AnimalRepositoryBDD --|> AnimalRepository



abstract AnimalAbstract{
    + weight : float
    + size : float
    + food : string
    + vulnerability : Vulnerability
    + family : string
    + life : int
    + habitat : string
    + geographicArea : string
    + numberIndividualConted : int
    + name : string
    + sponsors : Sponsor[]
}
class Animal
class AnimalDB
class AnimalAPI

interface AnimalRepository{
  + discoverAnimals(TypeZone) : Animal[]


}

class AnimalRepositoryBDD{
}

class AnimalRepositoryAPI{
}

enum Vulnerability{
    endangered
    vulnerable
    near threatened
    least concern
    data deficient
    not evaluated
}



@enduml
